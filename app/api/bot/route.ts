export const dynamic = "force-dynamic";

export const fetchCache = "force-no-store";

import { Bot, Context, InputFile, session, SessionFlavor, webhookCallback } from "grammy";
import prisma from "@/lib/db";
import { randomBytes } from "crypto";

import { Menu, MenuRange } from "@grammyjs/menu";
import { tgDomain } from "./menu";
import { Key, User } from "@prisma/client";
import { config } from "@/lib/config";

const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) throw new Error("TELEGRAM_BOT_TOKEN environment variable not found.");

type MinKey = {
    id: Key["id"];
    type: Key["type"];
};

interface SessionData {
    keys: MinKey[];
    viewKeyId: MinKey["id"];
}

type MyContext = Context & SessionFlavor<SessionData>;

const main = new Menu<MyContext>("main-menu")
    .submenu("–•–æ–ª–±–æ–ª—Ç üîåüì± ", "connect-menu", async (ctx) => await ctx.editMessageText("–•–æ–ª–±–æ—Ö —Ü—ç—Å"))
    .text("–ó–∞–∞–≤–∞—Ä üîóüì±üíª", async (ctx) => {
        await ctx.editMessageText(
            `
<b>OpenVPN —Ç–æ—Ö–∏—Ä–≥–æ–æ–Ω—ã —Ñ–∞–π–ª—ã–≥ –æ—Ä—É—É–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ —Ç–∞ –¥–∞—Ä–∞–∞—Ö –∞–ª—Ö–º—É—É–¥—ã–≥ —Ö–∏–π–∂ –±–æ–ª–Ω–æ</b>:

App Store/Play Store/Internet <b>OpenVPN</b> –∞–ø–ø—ã–≥ —Ç–∞—Ç
"OpenVPN Connect" –Ω—ç—ç—Ö
"Add" —Ç–æ–≤—á–∏–π–≥ –¥–∞—Ä–Ω–∞ —É—É
"File" —Ç–∞–±—ã–≥ –¥–∞—Ä–Ω–∞ —É—É
"Browse"-–∏–π–≥ –¥–∞—Ä–Ω–∞ —É—É
"<b>.ovpn</b>" —Ñ–∞–π–ª—ã–≥ –æ–ª–∂, –æ—Ä—É—É–ª–Ω–∞ —É—É
–®–∏–Ω—ç <b>–ø—Ä–æ—Ñ–∞–π–ª</b> –∞–ø–ø –¥—ç—ç—Ä —Ö–∞—Ä–∞–≥–¥–∞—Ö –±–æ–ª–Ω–æ

`,
            { parse_mode: "HTML" }
        );
    });

const bot = new Bot<MyContext>(token);
const pmBot = bot.chatType("private");

pmBot.use(session({ initial: () => ({ keys: [{}] }), prefix: "user-" }));

const connect = new Menu<MyContext>("connect-menu", {})
    .dynamic(async (ctx) => {
        if (!ctx.from) return;
        // TODO: Check if Vercel remove session data...
        const keys = ctx.session.keys;
        const range = new MenuRange<MyContext>();
        for (let i = 0; i < keys.length; i++) {
            const vpnType = keys[i].type === "OpenVPN" ? "OpenVPN" : keys[i].type === "WireGuardVPN" ? "WireGuard" : "Outline";
            const displayName = `–¢“Ø–ª—Ö“Ø“Ø—Ä (${vpnType}) ${i + 1}`;
            range
                .text(displayName, async (ctx) => {
                    if (!ctx.from) return;
                    const key = await prisma.key.findFirst({
                        where: {
                            id: ctx.session.viewKeyId,
                            user: { email: `${ctx.from.id}${tgDomain}` },
                        },
                    });
                    if (!key) {
                        return await ctx.reply("–î–∞—Ö–∏–Ω —ç—Ö–ª“Ø“Ø–ª—ç–Ω—ç “Ø“Ø...", { reply_markup: main });
                    }
                    const uintBuf = new Uint8Array(Buffer.from(key.secret, "utf-8"));
                    const file = new InputFile(uintBuf, `${ctx.from.id}_${i + 1}.ovpn`);
                    ctx.deleteMessage();
                    await ctx.replyWithDocument(file, { caption: key.createdAt.toLocaleString() });
                    await ctx.reply("–•–æ–ª–±–æ—Ö —Ü—ç—Å", { reply_markup: connect });
                })
                .row();
        }
        return range;
    })
    .text("–¢“Ø–ª—Ö“Ø“Ø—Ä–Ω“Ø“Ø–¥ üîÑ", async (ctx) => {
        await ctx.editMessageText("–¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø...");
        ctx.session.keys = await prisma.key.findMany({ where: { user: { email: `${ctx.from.id}${tgDomain}` } }, select: { type: true, id: true } });
        ctx.menu.update();
        return await ctx.editMessageText(`–®–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω –æ–≥–Ω–æ–æ: ${new Date().toLocaleString()}`);
    })
    .text("–¢“Ø–ª—Ö“Ø“Ø—Ä “Ø“Ø—Å–≥—ç—Ö üîë", async (ctx) => {
        await ctx.editMessageText("–¢“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø...");
        const dbRes = await prisma.user.findUnique({
            where: { email: `${ctx.from.id}${tgDomain}` },
            select: { banned: true, activeTill: true, _count: { select: { keys: true } } },
        });
        if (!dbRes) {
            return await ctx.editMessageText("”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.");
        }
        const { _count, banned, activeTill } = dbRes;
        if (activeTill < new Date()) {
            // TODO: GO TO PAYMENT
            return await ctx.editMessageText("–¢–∞ —Ç”©–ª–±”©—Ä”©”© —Ç”©–ª–Ω”© “Ø“Ø.");
        }
        if (banned) {
            return await ctx.editMessageText("–¢–∞–Ω—ã —Ö–∞—è–≥ –±–ª–æ–∫–ª–æ–≥–¥—Å–æ–Ω –±–∞–π–Ω–∞.");
        }
        if (_count.keys >= config.deviceLimitPerAcc) {
            return await ctx.editMessageText(`–¢“Ø–ª—Ö“Ø“Ø—Ä–Ω–∏–π —Ö—è–∑–≥–∞–∞—Ä —Ö—ç—Ç—ç—Ä—Å—ç–Ω –±–∞–π–Ω–∞. (${_count.keys}/${config.deviceLimitPerAcc})`);
        }
        const resp: Response = await fetch(`http://${process.env.OVIP}/create_new_user`, {
            method: "POST",
            body: JSON.stringify({ creds: process.env.OVPW }),
        });
        const data = await resp.text();
        if (data.startsWith("Success!")) {
            const key = data.replace("Success! Output: ", "");
            const [keyPath, keyConfig] = key.split("@#$");
            try {
                const {
                    user: { keys },
                } = await prisma.key.create({
                    data: { secret: keyConfig, user: { connect: { email: `${ctx.from.id}${tgDomain}` } }, keyPath: keyPath, type: "OpenVPN" },
                    select: { user: { select: { keys: { select: { id: true, type: true } } } } },
                });
                // Update the keys in session
                ctx.session.keys = [...keys];
                ctx.menu.update();
                return await ctx.editMessageText("–ê–º–∂–∏–ª—Ç—Ç–∞–π.");
            } catch (error) {
                return await ctx.editMessageText("Database —Å–µ—Ä–≤–µ—Ä –∞–∂–∏–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞.");
            }
        } else {
            return await ctx.editMessageText("VPN —Å–µ—Ä–≤–µ—Ä –∞–∂–∏–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞.");
        }
    })
    .row()
    .back("“Æ–Ω–¥—Å—ç–Ω —Ü—ç—Å —Ä“Ø“Ø –±—É—Ü–∞—Ö", async (ctx) => {
        await ctx.editMessageText("“Æ–Ω–¥—Å—ç–Ω —Ü—ç—Å");
    });

main.register(connect);
pmBot.use(main);

pmBot.command("start", async (ctx) => {
    const loadingMessage = await ctx.reply("–£–Ω—à–∏–∂ –±–∞–π–Ω–∞... üîÑ");
    const password = `${randomBytes(5).toString("hex")}`;
    const generatedEmail = `${ctx.from.id}${tgDomain}`;
    const init = async (u: User, nu: boolean) => {
        const cnt = `
<b>–°–∞–π–Ω —É—É, ${u.email}</b>!
${nu ? "–®–∏–Ω—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á –±–æ–ª–≥–æ–Ω 14 —Ö–æ–Ω–æ–≥–∏–π–Ω “Ø–Ω—ç–≥“Ø–π —ç—Ä—Ö—Ç—ç–π. –•—ç—Ä—ç–≤ –∞—Å—É—É–¥–∞–ª –≥–∞—Ä–≤–∞–ª –∞–¥–º–∏–Ω —Ä—É—É –±–∏—á—ç—ç—Ä—ç–π." : ""}
<b>–¢”©–ª”©–≤</b>: ${u.banned ? "–ë–ª–æ–∫–ª–æ–≥–¥—Å–æ–Ω üö´" : new Date() > u.activeTill ? "–•“Ø—á–∏–Ω–≥“Ø–π üíµ" : `–•“Ø—á–∏–Ω—Ç—ç–π (${u.activeTill.toISOString().slice(0, 19)}) ‚úÖ`}
                `;
        return await ctx.reply(cnt, { reply_markup: main, parse_mode: "HTML" });
    };
    try {
        // If the user is already registered
        const user = await prisma.user.findUnique({
            where: { email: generatedEmail },
        });
        // Just don't do anything?
        if (user) {
            ctx.session.keys = await prisma.key.findMany({ where: { userId: user.id }, select: { type: true, id: true } });
            await ctx.deleteMessages([loadingMessage.message_id]);
            return await init(user, false);
        }
        // Else we create the user
        const newUser = await prisma.user.create({ data: { email: generatedEmail, password: password } });
        await ctx.deleteMessages([loadingMessage.message_id]);
        // Respond back to the user
        return await init(newUser, true);
    } catch (error) {
        console.error(error);
        await ctx.deleteMessages([loadingMessage.message_id]);
        return await ctx.reply("–ë“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç–≥“Ø–π.\n/start");
    }
});

pmBot.errorBoundary(async (err) => {
    return await err.ctx.reply(`${err.error}`);
});

export const POST = webhookCallback(bot, "std/http", {
    onTimeout: "return",
    timeoutMilliseconds: 3000,
});
