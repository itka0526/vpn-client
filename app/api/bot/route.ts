export const dynamic = "force-dynamic";

export const fetchCache = "force-no-store";

import { Bot, session, webhookCallback } from "grammy";
import prisma from "@/lib/db";
import { randomBytes } from "crypto";
import { Menu, MenuRange } from "@grammyjs/menu";
import {
    androidInstructionsText,
    askText,
    connectText,
    goBackToMain,
    iosInstructionsText,
    iPaidMessage,
    macosInstructionsText,
    mainText,
    paymentText,
    reportIssueText,
    tgDomain,
    usersList,
    windowsInstructionsText,
} from "./menu";
import { config } from "@/lib/config";
import { createHiddifyKey, HIDDIFY_API_USER_BASE_URL } from "./hiddify";
import { MyContext } from "./types";
import { extendByOneMonth, extendBySetDays } from "./helper";

const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) throw new Error("TELEGRAM_BOT_TOKEN environment variable not found.");

const main = new Menu<MyContext>("main-menu")
    .submenu("–•–æ–ª–±–æ–ª—Ç üîåüì±", "connect-menu", async (ctx) => await ctx.editMessageText(connectText, { parse_mode: "HTML" }))
    .row()
    .submenu(
        "–¢”©–ª–±”©—Ä —Ç”©–ª”©—Ö üì≤üí≥",
        "payment-menu",
        async (ctx) => await ctx.editMessageText(paymentText(`${ctx.from.id}${tgDomain}`), { parse_mode: "HTML" })
    )
    .row()
    .text(
        "–°–∞–Ω–∞–ª —Ö“Ø—Å—ç–ª—Ç üö®üì©",
        async (ctx) =>
            await ctx.reply(askText, {
                parse_mode: "HTML",
                link_preview_options: { prefer_large_media: true },
            })
    )
    .row();

const bot = new Bot<MyContext>(token);
const pmBot = bot.chatType("private");

pmBot.use(session({ initial: () => ({ keys: [...Array(0)] }), prefix: "user-" }));

const connect = new Menu<MyContext>("connect-menu", {})
    .submenu("iOS üçéüì±", "instructions", async (ctx) => await ctx.editMessageText(iosInstructionsText, { parse_mode: "HTML" }))
    .submenu("Android ü§ñüì±", "instructions", async (ctx) => await ctx.editMessageText(androidInstructionsText, { parse_mode: "HTML" }))
    .row()
    .submenu("Windows ü™üüíª", "instructions", async (ctx) => await ctx.editMessageText(windowsInstructionsText, { parse_mode: "HTML" }))
    .submenu("macOS üçèüíª", "instructions", async (ctx) => await ctx.editMessageText(macosInstructionsText, { parse_mode: "HTML" }))
    .row()
    .dynamic(async (ctx) => {
        if (!ctx.from) return;
        const keys = ctx.session.keys;
        const range = new MenuRange<MyContext>();
        if (keys.length >= 1) range.text("------------------------").row();
        for (let i = 0; i < keys.length; i++) {
            const vpnType = keys[i].type;
            const displayName = `–ú–∏–Ω–∏–π —Ç“Ø–ª—Ö“Ø“Ø—Ä (${vpnType.toString()}) ${i + 1} üóùÔ∏è`;
            range.copyText(displayName, keys[i].keyPath).row();
        }
        if (keys.length >= 1) range.text("------------------------").row();
        return range;
    })
    .text("–¢“Ø–ª—Ö“Ø“Ø—Ä “Ø“Ø—Å–≥—ç—Ö üîë", async (ctx) => {
        await ctx.editMessageText(connectText + "\n<b>‚è≥ –¢–∞ —Ç“Ø—Ä —Ö“Ø–ª—ç—ç–Ω—ç “Ø“Ø...</b>", { parse_mode: "HTML" });
        const dbRes = await prisma.user.findUnique({
            where: { email: `${ctx.from.id}${tgDomain}` },
            select: { banned: true, activeTill: true, _count: { select: { keys: true } } },
        });
        if (!dbRes) {
            return await ctx.editMessageText(connectText + "\n<b>üö´ ”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.</b>", { parse_mode: "HTML" });
        }
        const { _count, banned, activeTill } = dbRes;
        if (activeTill < new Date()) {
            return await ctx.editMessageText(connectText + "\n<b>‚ö†Ô∏è –¢–∞ —Ç”©–ª–±”©—Ä”©”© —Ç”©–ª–Ω”© “Ø“Ø.</b>", { parse_mode: "HTML" });
        }
        if (banned) {
            return await ctx.editMessageText(connectText + "\n<b>‚ö†Ô∏è –¢–∞–Ω—ã —Ö–∞—è–≥ –±–ª–æ–∫–ª–æ–≥–¥—Å–æ–Ω –±–∞–π–Ω–∞.</b>", { parse_mode: "HTML" });
        }
        if (_count.keys >= config.deviceLimitPerAcc) {
            return await ctx.editMessageText(
                connectText + `\n<b>‚ö†Ô∏è –¢“Ø–ª—Ö“Ø“Ø—Ä–Ω–∏–π —Ö—è–∑–≥–∞–∞—Ä —Ö—ç—Ç—ç—Ä—Å—ç–Ω –±–∞–π–Ω–∞: (${_count.keys}/${config.deviceLimitPerAcc})</b>`,
                { parse_mode: "HTML" }
            );
        }
        try {
            await ctx.editMessageText(connectText + "\n<b>‚è≥ –®–∏–Ω—ç —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...</b>", { parse_mode: "HTML" });
            const key = await createHiddifyKey(ctx.from.id, `key_${ctx.from.id}_${_count.keys}`);
            const {
                user: { keys: dbkeys },
            } = await prisma.key.create({
                data: {
                    user: { connect: { email: `${ctx.from.id}${tgDomain}` } },
                    type: "HiddifyVPN",
                    keyPath: HIDDIFY_API_USER_BASE_URL.toString() + `/${key.uuid}`,
                    secret: JSON.stringify(key),
                },
                select: { user: { select: { keys: { select: { id: true, type: true, keyPath: true } } } } },
            });
            ctx.session.keys = [...dbkeys];
            ctx.menu.update();
            return await ctx.editMessageText(
                connectText + "\n<b>üéâ –û–¥–æ–æ —É–≥ —Ç“Ø–ª—Ö“Ø“Ø—Ä–∏–π–≥ –∞—à–∏–≥–ª–∞—Ö—ã–Ω —Ç—É–ª–¥ “Ø“Ø—Å–≥—ç—Å—ç–Ω —Ö–æ–ª–±–æ–æ—Å—ã–≥ —Ö—É—É–ª–∂, —Ç–∞—Ç—Å–∞–Ω –ø—Ä–æ–≥—Ä–∞–º —Ä—É—É–≥–∞–∞ —Ö—É—É–ª–Ω–∞ —É—É.</b>",
                { parse_mode: "HTML" }
            );
        } catch (error) {
            console.error(error);
            await ctx.api.sendMessage(
                config.adminTelegramId,
                reportIssueText(ctx.from.username ? `@${ctx.from.username} [${ctx.from.id}]` : `Anonymous [${ctx.from.id}]`, `${error}`),
                { parse_mode: "HTML" }
            );
            return await ctx.editMessageText(connectText + "\n<b>üö´ –û–¥–æ–æ–≥–æ–æ—Ä —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø“Ø—Å–≥—ç–∂ –±–æ–ª–æ—Ö–≥“Ø–π –±–∞–π–Ω–∞...</b>", { parse_mode: "HTML" });
        }
    })
    .text("–¢“Ø–ª—Ö“Ø“Ø—Ä–Ω“Ø“Ø–¥ üîÑ", async (ctx) => {
        try {
            await ctx.editMessageText(connectText + "\n‚è≥ <b>–¢–∞–Ω—ã —Ç“Ø–ª—Ö“Ø“Ø—Ä–Ω“Ø“Ø–¥–∏–π–≥ —Ö–∞–π–∂ –±–∞–π–Ω–∞...</b>", { parse_mode: "HTML" });
            ctx.session.keys = await prisma.key.findMany({
                where: { user: { email: `${ctx.from.id}${tgDomain}` } },
                select: { type: true, id: true, keyPath: true },
            });
            ctx.menu.update();
            return await ctx.editMessageText(connectText + `\n<b>üìÖ –®–∏–Ω—ç—á–ª—ç–≥–¥—Å—ç–Ω –æ–≥–Ω–æ–æ: ${new Date().toLocaleTimeString()}</b>`, {
                parse_mode: "HTML",
            });
        } catch (err) {
            return await ctx.editMessageText(connectText + `\n<b>üë®‚Äçüíª –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞... –•”©–≥–∂“Ø“Ø–ª—ç–≥—á—Ç—ç–π —Ö–æ–ª–±–æ–æ –±–∞—Ä–∏–Ω–∞ —É—É</b>`, { parse_mode: "HTML" });
        }
    })

    .row()
    .back("“Æ–Ω–¥—Å—ç–Ω —Ü—ç—Å —Ä“Ø“Ø –±—É—Ü–∞—Ö ‚¨ÖÔ∏è", goBackToMain);
const payment = new Menu<MyContext>("payment-menu")
    .text("üí∞ –ë–∏ —Ç”©–ª—Å”©–Ω", async (userCtx) => {
        await userCtx.api.sendMessage(
            config.adminTelegramId,
            iPaidMessage(
                userCtx.from.username ? `@${userCtx.from.username} [${userCtx.from.id}]` : `Anonymous [${userCtx.from.id}]`,
                `–•—ç—Ä—ç–≥–ª—ç–≥—á —Ç”©–ª–±”©—Ä —Ç”©–ª–ª”©”©... (${new Date().toLocaleString()})`
            ),
            { parse_mode: "HTML" }
        );
    })
    .row()
    .back("“Æ–Ω–¥—Å—ç–Ω —Ü—ç—Å —Ä“Ø“Ø –±—É—Ü–∞—Ö ‚¨ÖÔ∏è", goBackToMain);

const instructions = new Menu<MyContext>("instructions").back(
    "–•–æ–ª–±–æ—Ö —Ü—ç—Å —Ä—É—É –±—É—Ü–∞—Ö ‚¨ÖÔ∏è",
    async (ctx) => await ctx.editMessageText(connectText, { parse_mode: "HTML" })
);

main.register(connect);
main.register(payment);

connect.register(instructions);
pmBot.use(main);

pmBot.command("start", async (ctx) => {
    const loadingMessage = await ctx.reply("–£–Ω—à–∏–∂ –±–∞–π–Ω–∞... üîÑ", { parse_mode: "HTML" });
    const generatedEmail = `${ctx.from.id}${tgDomain}`;

    try {
        // If the user is already registered
        const searchingUser = await ctx.reply("–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ —Ö–∞–π–∂ –±–∞–π–Ω–∞... üßë‚Äçüíª");
        const user = await prisma.user.findUnique({
            where: { email: generatedEmail },
        });
        await ctx.deleteMessages([searchingUser.message_id]);
        // Just don't do anything?
        if (user) {
            ctx.session.keys = await prisma.key.findMany({ where: { userId: user.id }, select: { type: true, id: true, keyPath: true } });
            await ctx.deleteMessages([loadingMessage.message_id]);
            return await ctx.reply(mainText(user), {
                reply_markup: main,
                parse_mode: "HTML",
                link_preview_options: { show_above_text: true, prefer_small_media: true },
            });
        }
        // Else we create the user
        const password = `${randomBytes(5).toString("hex")}`;
        const registeringUser = await ctx.reply("–ë“Ø—Ä—Ç–≥—ç–∂ –±–∞–π–Ω–∞... üë§");
        const newUser = await prisma.user.create({ data: { email: generatedEmail, password: password } });
        await ctx.deleteMessages([registeringUser.message_id, loadingMessage.message_id]);
        // Respond back to the user
        return await ctx.reply(mainText(newUser, true), { reply_markup: main, parse_mode: "HTML" });
    } catch (error) {
        console.error(error);
        await ctx.api.sendMessage(
            config.adminTelegramId,
            reportIssueText(
                ctx.message.from.username ? `@${ctx.message.from.username} [${ctx.message.from.id}]` : `Anonymous [${ctx.message.from.id}]`,
                `${error}`
            ),
            { parse_mode: "HTML" }
        );
        await ctx.deleteMessages([loadingMessage.message_id]);
        return await ctx.reply("–ë“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç–≥“Ø–π. ‚ùå\n/start");
    }
});

pmBot.errorBoundary(async (err) => {
    return await err.ctx.reply(`${err.error}`);
});

pmBot.filter(
    async (ctx) => {
        return `${ctx.from.id}` === config.adminTelegramId;
    },
    async (ctx) => {
        if (ctx.message?.text) {
            if (ctx.message.text.startsWith("/users")) {
                const users = await prisma.user.findMany({ select: { email: true } });
                const list = "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥:\n" + usersList(users);
                await ctx.reply(list);
            } else if (ctx.message.text.startsWith("/extend")) {
                const rawMessage = ctx.message.text;
                const [command, userEmail, days] = rawMessage.split(" ");
                console.log(command);
                days ? await extendBySetDays(userEmail, Number(days)) : await extendByOneMonth(userEmail);
                await ctx.reply("‚ÑπÔ∏è –ê–º–∂–∏–ª—Ç—Ç–∞–π");
            } else {
                await ctx.reply(`
–ö–æ–º–∞–Ω–¥—É—É–¥:

# –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥–∏–π–Ω –Ω—ç—Ä—Å–∏–π–Ω –∂–∞–≥—Å–∞–ª—Ç
/users

# –°—É–Ω–≥–∞—Ö - extend userEmail dayToAdd
/extend
            `);
            }
        }
    }
);

pmBot.on("msg:text", async (ctx) => {
    try {
        await ctx.api.sendMessage(
            config.adminTelegramId,
            reportIssueText(
                ctx.message.from.username ? `@${ctx.message.from.username} [${ctx.message.from.id}]` : `Anonymous [${ctx.message.from.id}]`,
                ctx.message.text
            ),
            { parse_mode: "HTML" }
        );
    } catch (e) {
        console.error(e);
        await ctx.api.sendMessage(config.adminTelegramId, "–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞... –ú–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç–≥–¥—Å—ç–Ω–≥“Ø–π.");
    }
});

export const POST = webhookCallback(bot, "std/http", {
    onTimeout: "return",
    timeoutMilliseconds: 100,
});
